1、如何理解JVM
a、是java平台的一部分，是一种能够运行java bytecode的虚拟机
b、jvm是java实现跨平台的基石
c、jvm是硬件计算机的抽象实现，可以解释执行java字节码
2、如何理解jvm的运行模式
jvm运行模式有两种，分别为server和client,
server为重量型虚拟机，启动慢，但启动稳定后程序运行速度快
client为轻量型虚拟机，启动快，但启动运行速度没有server快
3、jvm产品结构
类加载系统：负责加载类到内存
运行时数据区：负责存储数据信息
执行引擎：负责调用对象执行业务
4、运行时数据区
运行时数据区分为线程共享区和线程私有区，线程共享区包括堆和方法区，线程私有区包括虚拟机栈、本地方法栈和程序计数器
堆在虚拟机启动时创建，被所有线程共享，用于存放所有的java对象实例，可分为新生代和老年代，是垃圾收集器（GC）管理的主要区域，堆中没有内存分配会抛出OutOfMemoryError
堆内存大小配置参数说明：
1) -Xms 设置堆的最小空间大小。
2) -Xmx 设置堆的最大空间大小。
3) -XX:NewSize 设置新生代最小空间大小。
4) -XX:MaxNewSize 设置新生代最大空间大小。
5) -XX:NewRatio 新生代和老年代的比值，值为 4 则表示新生代:比老年代 1:4
6) -XX:SurivorRatio 表示 Survivor 和 eden 的比值，值为 8 表示两个
7) survivor:eden=2:8.
8) -Xss:设置每个线程的堆栈大小

方法区用于存储类的数据结构信息，不同jdk方法区的实现不同JDK8 中的方法区对应的是 Metaspace，是一块本地内存
程序计数器在线程启动就创建，线程私有，用户记录当前正在执行的虚拟机字节码指令地址，是唯一个没有内存溢出的区域

虚拟机栈概要：
1) 用于存储栈帧(Stack Frame)对象， 保存方法的局部变量表、操作数栈、执
行运行时常量池的引用和一些额外的附加信息。
2) 一次方法调用都会创建一个新的栈帧，并压栈。 当方法执行完毕之后，便会
将栈帧出栈。
3) 栈上分配：对于小对象（一般几十个 bytes），在没有逃逸的情况下，可以
直接分配在栈上（直接分配在栈上，可以自动回收，减轻 GC 压力）；大对象
或者逃逸对象无法栈上分配
说明：方法在进行递归调用时容器出现栈内存溢出